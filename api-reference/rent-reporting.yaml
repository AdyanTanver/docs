openapi: 3.0.1
info:
  title: proto/rent_reporting/v1/rent_reporting.proto
  version: version not set
servers:
- url: /
tags:
- name: RentReportingService
paths:
  /v1/rent-reporting/report:
    post:
      tags:
      - Rent Reporting
      summary: Report rent
      description: Report rent payments of a renter to Credit Agencies
      operationId: RentReportingService_Report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ReportRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ReportResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
components:
  schemas:
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    protorent_reportingv1CoveAddress:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        provinceState:
          type: string
        country:
          type: string
        postalCode:
          type: string
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1AccountStatus:
      type: string
      default: ACCOUNT_STATUS_UNSPECIFIED
      enum:
      - ACCOUNT_STATUS_UNSPECIFIED
      - ACCOUNT_STATUS_IN_GOOD_STANDING
      - ACCOUNT_STATUS_30_DAYS_PAST_DUE
      - ACCOUNT_STATUS_60_DAYS_PAST_DUE
      - ACCOUNT_STATUS_90_DAYS_PAST_DUE
      - ACCOUNT_STATUS_120_DAYS_PAST_DUE
      - ACCOUNT_STATUS_150_DAYS_PAST_DUE
      - ACCOUNT_STATUS_180_DAYS_PAST_DUE
    v1ECOACode:
      type: string
      default: ECOA_CODE_UNSPECIFIED
      enum:
      - ECOA_CODE_UNSPECIFIED
      - ECOA_CODE_INDIVIDUAL
      - ECOA_CODE_JOINT
    v1ReportRequest:
      type: object
      properties:
        leaseStartDate:
          type: string
        leaseEndDate:
          type: string
        rentAmount:
          type: string
          format: uint64
        rentPaid:
          type: string
          format: uint64
        currentBalanceDue:
          type: number
          format: double
        amountPastDue:
          type: number
          format: double
        accountStatus:
          $ref: '#/components/schemas/v1AccountStatus'
        paymentHistoryProfile:
          type: string
        dateOfFirstDelinquency:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        dateOfBirth:
          type: string
        phone:
          type: string
        email:
          type: string
        ecoaCode:
          $ref: '#/components/schemas/v1ECOACode'
        address:
          $ref: '#/components/schemas/protorent_reportingv1CoveAddress'
    v1ReportResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: string
x-original-swagger-version: "2.0"
